@Ecore(nsPrefix="infrastructure", nsURI="https://migueljimenez.co/devops/infrastructure")
@GenModel(
    bundleManifest="false",
    modelDirectory="co.migueljimenez.devops.infrastructure/src/main/java-gen",
    complianceLevel="8.0"
)
package co.migueljimenez.devops.infrastructure.model

import de.xn__ho_hia.storage_unit.StorageUnit

// Types

type StorageQuantity wraps StorageUnit<?>
type Number wraps Number

enum ContainerFormat {
	AMI as "ami" = 0
	ARI as "ari" = 1
	AKI as "aki" = 2
	BARE as "bare" = 3
	OVF as "ovf" = 4
}

enum DiskFormat {
	AMI as "ami" = 0
	ARI as "ari" = 1
	AKI as "aki" = 2
	VHD as "vhd" = 3
	VMDK as "vmdk" = 4
	RAW as "raw" = 5
	QCOW2 as "qcow2" = 6
	VDI as "vdi" = 7
	ISO as "iso" = 8
}

// Do not use a map, as there may be duplicates
class KeyValuePair<K, V> {
	K key
	V value
}

class Dictionary<K, V> {
	contains KeyValuePair<K, V>[] elements
}

// Entities

class VirtualInfrastructure {
	contains Credential[] credentials opposite project
	contains Flavor[] flavors opposite project
	contains Image[] images opposite project
	contains Instance[] instances opposite project
	contains Network[] networks opposite project
	contains SecurityGroup[] securityGroups opposite project
	contains Volume[] volumes opposite project
	contains UnknownResource<String, Object>[] resources opposite project
}

class Flavor {
	id String ^id
	String name
	int vcpus
	StorageQuantity disk
	StorageQuantity ram
	container VirtualInfrastructure project opposite flavors
}

class Image {
	id String ^id
	String name
	ContainerFormat containerFormat
	DiskFormat diskFormat
	String imageSourceUrl
	StorageQuantity minDisk
	StorageQuantity minRam
	container VirtualInfrastructure project opposite images
}

class Credential {
	id String name
	String publicKey
	container VirtualInfrastructure project opposite credentials
}

class Volume {
	id String ^id
	String name
	String description
	StorageQuantity size
	refers Image image
	container VirtualInfrastructure project opposite volumes
}

class Subnet {
	id String name
	String cidr
	int ipVersion
	container Network network opposite subnets
}

class Network {
	id String ^id
	String name
	contains Subnet[] subnets opposite network
	container VirtualInfrastructure project opposite networks
}

class SecurityRule {
	int from
	int to
	String protocol
	String cidr
	container SecurityGroup parent opposite rules
}

class SecurityGroup {
	id String ^id
	String name
	String description
	contains SecurityRule[] rules opposite parent
	container VirtualInfrastructure project opposite securityGroups
}

class Instance {
	id String ^id
	String name
	refers Credential credential
	refers Flavor flavor
	refers Network[] networks
	refers Volume[] volumes
	refers SecurityGroup[] securityGroups
	container VirtualInfrastructure project opposite instances
}

class UnknownResource<K, V> {
	// The type of OpenStack resource
	String resourceType
	// The specific OpenStack type
	String ^type
	String name
	contains Dictionary<K, V> attributes
	container VirtualInfrastructure project opposite resources
}
